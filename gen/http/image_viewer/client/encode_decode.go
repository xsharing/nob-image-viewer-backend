// Code generated by goa v3.5.4, DO NOT EDIT.
//
// image-viewer HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/image-viewer/nob-image-viewer-backend/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	imageviewer "github.com/image-viewer/nob-image-viewer-backend/gen/image_viewer"
	goahttp "goa.design/goa/v3/http"
)

// BuildFoldersRequest instantiates a HTTP request object with method and path
// set to call the "image-viewer" service "folders" endpoint
func (c *Client) BuildFoldersRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FoldersImageViewerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("image-viewer", "folders", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeFoldersResponse returns a decoder for responses returned by the
// image-viewer folders endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeFoldersResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body []string
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("image-viewer", "folders", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("image-viewer", "folders", resp.StatusCode, string(body))
		}
	}
}

// BuildImagesRequest instantiates a HTTP request object with method and path
// set to call the "image-viewer" service "images" endpoint
func (c *Client) BuildImagesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ImagesImageViewerPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("image-viewer", "images", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeImagesRequest returns an encoder for requests sent to the image-viewer
// images server.
func EncodeImagesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*imageviewer.ImagesPayload)
		if !ok {
			return goahttp.ErrInvalidType("image-viewer", "images", "*imageviewer.ImagesPayload", v)
		}
		values := req.URL.Query()
		if p.Folder != nil {
			values.Add("folder", *p.Folder)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeImagesResponse returns a decoder for responses returned by the
// image-viewer images endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeImagesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ImagesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("image-viewer", "images", err)
			}
			res := NewImagesImageOK(body)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("image-viewer", "images", resp.StatusCode, string(body))
		}
	}
}

// unmarshalImageResponseToImageviewerImage builds a value of type
// *imageviewer.Image from a value of type *ImageResponse.
func unmarshalImageResponseToImageviewerImage(v *ImageResponse) *imageviewer.Image {
	res := &imageviewer.Image{
		Name:         v.Name,
		ThumbnailURL: v.ThumbnailURL,
		OriginalURL:  v.OriginalURL,
	}

	return res
}
