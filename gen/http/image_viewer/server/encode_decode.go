// Code generated by goa v3.5.4, DO NOT EDIT.
//
// image-viewer HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/image-viewer/nob-image-viewer-backend/design

package server

import (
	"context"
	"net/http"

	imageviewer "github.com/image-viewer/nob-image-viewer-backend/gen/image_viewer"
	goahttp "goa.design/goa/v3/http"
)

// EncodeFoldersResponse returns an encoder for responses returned by the
// image-viewer folders endpoint.
func EncodeFoldersResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]string)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeImagesResponse returns an encoder for responses returned by the
// image-viewer images endpoint.
func EncodeImagesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res, _ := v.([]*imageviewer.Image)
		ctx = context.WithValue(ctx, goahttp.ContentTypeKey, "application/json")
		enc := encoder(ctx, w)
		body := NewImagesResponseBody(res)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeImagesRequest returns a decoder for requests sent to the image-viewer
// images endpoint.
func DecodeImagesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			folder *string
		)
		folderRaw := r.URL.Query().Get("folder")
		if folderRaw != "" {
			folder = &folderRaw
		}
		payload := NewImagesPayload(folder)

		return payload, nil
	}
}

// marshalImageviewerImageToImageResponse builds a value of type *ImageResponse
// from a value of type *imageviewer.Image.
func marshalImageviewerImageToImageResponse(v *imageviewer.Image) *ImageResponse {
	res := &ImageResponse{
		Name:         v.Name,
		ThumbnailURL: v.ThumbnailURL,
		OriginalURL:  v.OriginalURL,
	}

	return res
}
